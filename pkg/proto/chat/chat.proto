// Copyright © 2023 OpenIM open source community. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package OpenIMChat.chat;
import "pub/wrapperspb.proto";
import "pub/sdkws.proto";
import "common/common.proto";
option go_package = "github.com/OpenIMSDK/chat/pkg/proto/chat";

message UserIdentity {
  string email = 1;
  string areaCode = 2;
  string phoneNumber = 3;
  string deviceID = 4;
  int32 platform = 5;
  string account = 6;
}


message UpdateUserInfoReq{
  string  userID = 1;
  OpenIMServer.protobuf.StringValue  account = 2;
  OpenIMServer.protobuf.StringValue  phoneNumber = 3;
  OpenIMServer.protobuf.StringValue  areaCode = 4;
  OpenIMServer.protobuf.StringValue  email = 5;
  OpenIMServer.protobuf.StringValue  nickname = 6;
  OpenIMServer.protobuf.StringValue  faceURL = 7;
  OpenIMServer.protobuf.Int32Value  gender = 8;
  OpenIMServer.protobuf.Int32Value  level = 9;
  OpenIMServer.protobuf.Int64Value birth = 10;
  OpenIMServer.protobuf.Int32Value  allowAddFriend = 11;
  OpenIMServer.protobuf.Int32Value  allowBeep = 12;
  OpenIMServer.protobuf.Int32Value  allowVibration = 13;
  OpenIMServer.protobuf.Int32Value  globalRecvMsgOpt = 14;
}

message UpdateUserInfoResp{
  string faceUrl = 1;
  string nickName = 2;
}

message FindUserPublicInfoReq{
  repeated  string userIDs = 1;
}

message FindUserPublicInfoResp{
  repeated OpenIMChat.common.UserPublicInfo users = 1;
}

message SearchUserPublicInfoReq{
  string keyword = 1;
  OpenIMServer.sdkws.RequestPagination pagination = 2;
  int32 genders = 3;
}

message SearchUserPublicInfoResp{
  uint32 total = 1;
  repeated OpenIMChat.common.UserPublicInfo users = 2;
}

message FindUserFullInfoReq{
  repeated string userIDs = 1;
}

message FindUserFullInfoResp{
  repeated OpenIMChat.common.UserFullInfo users = 1;
}

message SendVerifyCodeReq {
  int32 usedFor = 1;
  string ip = 2;
  string invitationCode = 3;
  string deviceID = 4;
  int32 platform = 5;
  string areaCode = 6;
  string phoneNumber = 7;
}

message SendVerifyCodeResp {
}

message VerifyCodeReq {
  string areaCode = 1;
  string phoneNumber = 2;
  string verifyCode = 3;
}

message VerifyCodeResp {
}

message RegisterUserInfo {
  string userID = 1;
  string nickname = 2;
  string faceURL = 3;
  int64 birth = 4;
  int32 gender = 5;
  string areaCode = 6;
  string phoneNumber = 7;
  string email = 8;
  string account = 9;
  string password = 10;
}

message RegisterUserReq {
  string invitationCode = 1;
  string verifyCode = 2;
  string ip = 3;
  string deviceID = 4;
  int32 platform = 5;
  bool autoLogin = 6;
  RegisterUserInfo user = 7;
}

message RegisterUserResp {
  string userID = 1;
  string chatToken = 3;
}

message LoginReq {
  string areaCode = 1;
  string phoneNumber = 2;
  string verifyCode = 3;
  string account = 4;
  string password = 5;
  int32 platform = 6;
  string deviceID = 7;
  string ip = 8;
}

message LoginResp {
  string chatToken = 2;
  string userID = 3;
}

message ResetPasswordReq {
  string areaCode = 1;
  string phoneNumber = 2;
  string verifyCode = 3;
  string password = 4;
}

message ResetPasswordResp {
}

message ChangePasswordReq {
  string userID = 1;
  string currentPassword = 2;
  string newPassword = 3;
}

message ChangePasswordResp {
}

message FindUserAccountReq {
  repeated string userIDs = 1;
}


message FindUserAccountResp {
  map<string, string> userAccountMap = 1; // userID  account
}

message FindAccountUserReq {
  repeated string accounts = 1;
}

message FindAccountUserResp {
  map<string, string> accountUserMap = 1; // account  userID
}

message SignalRecord {
  string fileName = 1;
  string mediaType = 2;
  string roomType = 3;
  string senderID = 4;
  string senderNickname = 5;
  string recvID = 6;
  string recvNickname = 7;
  string groupID = 8;
  string groupName = 9;
  repeated OpenIMChat.common.UserPublicInfo inviterUserList = 10;
  int32 duration = 11;
  int64 createTime = 12;
  string size = 13;
  string downloadURL = 14;
}

message AddSignalRecordReq {
  SignalRecord signalRecord = 1;
  string operationID = 2;
}

message AddSignalRecordResp {
}

message GetSignalRecordsReq {
  OpenIMServer.sdkws.RequestPagination pagination = 1;
  string senderID = 2;
  string recvID = 3;
  string mediaType = 4;
  int64 createTime = 5;
  string operationID = 6;
}

message GetSignalRecordsResp {
  uint32 totalNumber = 1;
  repeated SignalRecord signalRecords = 2;
}

message OpenIMCallbackReq {
  string command = 1;
  string body = 2;
}

message OpenIMCallbackResp {

}

message SearchUserFullInfoReq{
  string keyword = 1;
  OpenIMServer.sdkws.RequestPagination pagination = 2;
  int32 genders = 3;
  int32 normal = 4;
}

message SearchUserFullInfoResp{
  uint32 total = 1;
  repeated OpenIMChat.common.UserFullInfo users = 2;
}

message UserLoginCountReq{
  int64 start = 1;
  int64 end = 2;
}

message UserLoginCountResp{
  int64 loginCount = 1;
  int64 unloginCount = 2;
  map<string, int64>Count = 3;
}

message fileURL{
  string filename = 1;
  string URL = 2;
}
message UploadLogsReq{
  int32 platform = 1;
  repeated fileURL fileURLs = 2;
  string systemType = 3;
  string version = 5;
  string ex = 4;
}

message UploadLogsResp{
}

message DeleteLogsReq{
  repeated string logIDs = 1;
}

message DeleteLogsResp{
}

message SearchLogsReq{
  string keyword = 1;
  int64 startTime = 2;
  int64 endTime = 3;
  OpenIMServer.sdkws.RequestPagination pagination = 4;
}

message SearchLogsResp{
  repeated OpenIMChat.common.LogInfo LogsInfos = 1;
  uint32 total = 2;
}

message SearchUserInfoReq{
  string keyword = 1;
  OpenIMServer.sdkws.RequestPagination pagination = 2;
  repeated int32 genders = 3;
  repeated string userIDs = 4;
}

message SearchUserInfoResp {
  uint32 total = 1;
  repeated OpenIMChat.common.UserFullInfo users = 2;
}

service chat {
  //编辑个人资料 自己或者管理员调用
  rpc UpdateUserInfo(UpdateUserInfoReq) returns(UpdateUserInfoResp);
  //获取用户的公开信息   陌生人调用
  rpc SearchUserPublicInfo(SearchUserPublicInfoReq) returns(SearchUserPublicInfoResp);
  rpc FindUserPublicInfo(FindUserPublicInfoReq) returns(FindUserPublicInfoResp);
  //搜索用户信息 管理员调用 其他用户调用时返回public字段
  rpc SearchUserFullInfo(SearchUserFullInfoReq) returns(SearchUserFullInfoResp);
  rpc FindUserFullInfo(FindUserFullInfoReq) returns(FindUserFullInfoResp);

  rpc SendVerifyCode(SendVerifyCodeReq) returns(SendVerifyCodeResp);
  rpc VerifyCode(VerifyCodeReq) returns(VerifyCodeResp);
  rpc RegisterUser(RegisterUserReq) returns(RegisterUserResp);
  rpc Login(LoginReq) returns(LoginResp);
  rpc ResetPassword(ResetPasswordReq) returns(ResetPasswordResp);
  rpc ChangePassword(ChangePasswordReq) returns(ChangePasswordResp);

  rpc FindUserAccount(FindUserAccountReq) returns(FindUserAccountResp);
  rpc FindAccountUser(FindAccountUserReq) returns(FindAccountUserResp);

  rpc AddSignalRecord(AddSignalRecordReq) returns(AddSignalRecordResp);
  rpc GetSignalRecords(GetSignalRecordsReq) returns(GetSignalRecordsResp);

  rpc OpenIMCallback(OpenIMCallbackReq) returns(OpenIMCallbackResp);

  //统计
  rpc UserLoginCount(UserLoginCountReq) returns (UserLoginCountResp);
  //日志
  rpc UploadLogs(UploadLogsReq) returns (UploadLogsResp);
  rpc DeleteLogs(DeleteLogsReq) returns (DeleteLogsResp);
  rpc SearchLogs(SearchLogsReq) returns (SearchLogsResp);

  rpc SearchUserInfo(SearchUserInfoReq)returns(SearchUserInfoResp);
}